{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RATHISHBARATH/Advanced-Image-Captioning-with-CNN-and-LSTM-using-Custom-Modules-in-Tensorflow/blob/main/Assignment%3A%20Predictive%20Modeling%20for%20Digital%20Marketing%20Campaign%20Performance\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 56
        },
        "id": "knEeDq0HWKOM",
        "outputId": "0279c9c3-9fc5-4872-8852-987b6a2c71da"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-42c454bc-ff90-4d4e-a8ed-2c24e3bfda5c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-42c454bc-ff90-4d4e-a8ed-2c24e3bfda5c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import numpy as np\n",
        "from google.colab import files\n",
        "import io  # Required for file handling in Colab\n",
        "\n",
        "# Define custom functions\n",
        "\n",
        "# EDA functions\n",
        "def load_data():\n",
        "    try:\n",
        "        uploaded = files.upload()\n",
        "        file_name = next(iter(uploaded))\n",
        "        df = pd.read_csv(io.BytesIO(uploaded[file_name]))\n",
        "        print(f\"Data loaded successfully with {df.shape[0]} rows and {df.shape[1]} columns.\")\n",
        "        return df\n",
        "    except Exception as e:\n",
        "        print(f\"Error loading data: {e}\")\n",
        "        return None\n",
        "\n",
        "def basic_info(df):\n",
        "    print(df.head())\n",
        "    print(df.describe())\n",
        "    print(df.isnull().sum())\n",
        "\n",
        "def correlation_matrix(df):\n",
        "    numeric_columns = df.select_dtypes(include=[np.number]).columns\n",
        "    correlation_matrix = df[numeric_columns].corr()\n",
        "    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n",
        "    plt.title('Correlation Matrix')\n",
        "    plt.show()\n",
        "\n",
        "def plot_distributions(df, numeric_columns):\n",
        "    for col in numeric_columns:\n",
        "        sns.histplot(df[col], kde=True)\n",
        "        plt.title(f'Distribution of {col}')\n",
        "        plt.show()\n",
        "\n",
        "def plot_boxplots(df, numeric_columns):\n",
        "    for col in numeric_columns:\n",
        "        sns.boxplot(x=df[col])\n",
        "        plt.title(f'Boxplot of {col}')\n",
        "        plt.show()\n",
        "\n",
        "def plot_categorical_attributes(df, categorical_attributes):\n",
        "    for col in categorical_attributes:\n",
        "        sns.countplot(y=df[col], order=df[col].value_counts().index)\n",
        "        plt.title(f'Distribution of {col}')\n",
        "        plt.show()\n",
        "\n",
        "def plot_categorical_vs_performance(df, categorical_attributes, target):\n",
        "    for cat_col in categorical_attributes:\n",
        "        sns.boxplot(x=df[cat_col], y=df[target])\n",
        "        plt.title(f'{target} vs {cat_col}')\n",
        "        plt.show()\n",
        "\n",
        "# Preprocessing functions\n",
        "def handle_missing_values(df, numeric_columns):\n",
        "    imputer = SimpleImputer(strategy='mean')\n",
        "    df[numeric_columns] = imputer.fit_transform(df[numeric_columns])\n",
        "    return df\n",
        "\n",
        "def encode_categorical_variables(df, categorical_attributes):\n",
        "    label_encoders = {}\n",
        "    for col in categorical_attributes:\n",
        "        le = LabelEncoder()\n",
        "        df[col] = le.fit_transform(df[col].astype(str))\n",
        "        label_encoders[col] = le\n",
        "    return df, label_encoders\n",
        "\n",
        "def standardize_features(df, numeric_columns):\n",
        "    scaler = StandardScaler()\n",
        "    df[numeric_columns] = scaler.fit_transform(df[numeric_columns])\n",
        "    return df, scaler\n",
        "\n",
        "def feature_engineering(df):\n",
        "    numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()\n",
        "    if len(numeric_columns) >= 2:\n",
        "        df['NewFeature'] = df[numeric_columns[0]] * df[numeric_columns[1]]\n",
        "    return df\n",
        "\n",
        "# Modeling functions\n",
        "def split_data(df, features, target, test_size=0.2, random_state=42):\n",
        "    X = df[features]\n",
        "    y = df[target]\n",
        "    return train_test_split(X, y, test_size=test_size, random_state=random_state)\n",
        "\n",
        "def train_model(X_train, y_train):\n",
        "    model = GradientBoostingRegressor(random_state=42)\n",
        "    param_grid = {\n",
        "        'n_estimators': [100, 200],\n",
        "        'learning_rate': [0.01, 0.1],\n",
        "        'max_depth': [3, 5]\n",
        "    }\n",
        "    grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error')\n",
        "    grid_search.fit(X_train, y_train)\n",
        "    return grid_search.best_estimator_\n",
        "\n",
        "def evaluate_model(model, X_train, y_train, X_test, y_test):\n",
        "    cv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='neg_mean_squared_error')\n",
        "    y_pred = model.predict(X_test)\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    return -np.mean(cv_scores), mse, r2\n",
        "\n",
        "def feature_importance(model, features):\n",
        "    importances = model.feature_importances_\n",
        "    return dict(zip(features, importances))\n",
        "\n",
        "# Additional Plot Functions\n",
        "def scatter_plot(df, x_col, y_col):\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.scatter(df[x_col], df[y_col])\n",
        "    plt.title(f'Scatter Plot: {x_col} vs {y_col}')\n",
        "    plt.xlabel(x_col)\n",
        "    plt.ylabel(y_col)\n",
        "    plt.show()\n",
        "\n",
        "def bar_graph(df, x_col, y_col):\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.barplot(x=df[x_col], y=df[y_col])\n",
        "    plt.title(f'Bar Graph: {x_col} vs {y_col}')\n",
        "    plt.xlabel(x_col)\n",
        "    plt.ylabel(y_col)\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.show()\n",
        "\n",
        "def line_plot(df, x_col, y_col):\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(df[x_col], df[y_col], marker='o', linestyle='-')\n",
        "    plt.title(f'Line Plot: {x_col} vs {y_col}')\n",
        "    plt.xlabel(x_col)\n",
        "    plt.ylabel(y_col)\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "def pie_chart(df, column):\n",
        "    plt.figure(figsize=(8, 8))\n",
        "    counts = df[column].value_counts()\n",
        "    plt.pie(counts, labels=counts.index, autopct='%1.1f%%', startangle=140)\n",
        "    plt.title(f'Pie Chart: Distribution of {column}')\n",
        "    plt.show()\n",
        "\n",
        "def heatmap(df):\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.heatmap(df.corr(), annot=True, cmap='coolwarm', linewidths=.5)\n",
        "    plt.title('Heatmap of Correlation Matrix')\n",
        "    plt.show()\n",
        "\n",
        "def density_plot(df, column):\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    sns.kdeplot(df[column], shade=True)\n",
        "    plt.title(f'Density Plot: {column}')\n",
        "    plt.xlabel(column)\n",
        "    plt.ylabel('Density')\n",
        "    plt.show()\n",
        "\n",
        "def violin_plot(df, x_col, y_col):\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.violinplot(x=df[x_col], y=df[y_col])\n",
        "    plt.title(f'Violin Plot: {x_col} vs {y_col}')\n",
        "    plt.xlabel(x_col)\n",
        "    plt.ylabel(y_col)\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.show()\n",
        "\n",
        "def bubble_chart(df, x_col, y_col, bubble_size_col):\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.scatterplot(x=df[x_col], y=df[y_col], size=df[bubble_size_col], sizes=(20, 200), legend=False)\n",
        "    plt.title(f'Bubble Chart: {x_col} vs {y_col} (Bubble Size: {bubble_size_col})')\n",
        "    plt.xlabel(x_col)\n",
        "    plt.ylabel(y_col)\n",
        "    plt.show()\n",
        "\n",
        "def contour_plot(df, x_col, y_col):\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.kdeplot(x=df[x_col], y=df[y_col], cmap='viridis', shade=True, bw_method='silverman')\n",
        "    plt.title(f'Contour Plot: {x_col} vs {y_col}')\n",
        "    plt.xlabel(x_col)\n",
        "    plt.ylabel(y_col)\n",
        "    plt.show()\n",
        "\n",
        "def dot_plot(df, x_col, y_col):\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.stripplot(x=df[x_col], y=df[y_col], jitter=True, alpha=0.6)\n",
        "    plt.title(f'Dot Plot: {x_col} vs {y_col}')\n",
        "    plt.xlabel(x_col)\n",
        "    plt.ylabel(y_col)\n",
        "    plt.show()\n",
        "\n",
        "def create_presentation(methodology_content, findings_content, recommendations_content, img_paths):\n",
        "    \"\"\"\n",
        "    Function to create a presentation deck highlighting key points from analysis and model results.\n",
        "    \"\"\"\n",
        "    # Example implementation to create presentation deck\n",
        "    pass\n",
        "\n",
        "def identify_target_column(df):\n",
        "    numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()\n",
        "    if not numeric_columns:\n",
        "        raise ValueError(\"No numeric columns found to identify target.\")\n",
        "\n",
        "    correlation_matrix = df[numeric_columns].corr()\n",
        "    target_candidates = correlation_matrix.abs().sum().sort_values(ascending=False).index\n",
        "    # Assuming the column with the highest sum of correlations with other columns as target\n",
        "    potential_target = target_candidates[0]\n",
        "    return potential_target\n",
        "\n",
        "# Main script\n",
        "\n",
        "# Load the dataset\n",
        "df = load_data()\n",
        "\n",
        "if df is not None:\n",
        "    # Perform basic information checks\n",
        "    basic_info(df)\n",
        "\n",
        "    # Define performance metrics and categorical attributes dynamically\n",
        "    numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()\n",
        "    categorical_attributes = df.select_dtypes(exclude=[np.number]).columns.tolist()\n",
        "\n",
        "    if len(numeric_columns) > 0:\n",
        "        plot_distributions(df, numeric_columns)\n",
        "        plot_boxplots(df, numeric_columns)\n",
        "    if len(categorical_attributes) > 0:\n",
        "        plot_categorical_attributes(df, categorical_attributes)\n",
        "    if len(numeric_columns) > 0:\n",
        "        correlation_matrix(df)\n",
        "\n",
        "    # Identify the target column dynamically\n",
        "    target = identify_target_column(df)\n",
        "    print(f\"Identified target column: {target}\")\n",
        "\n",
        "    # Handle missing values and encode categorical variables\n",
        "    df = handle_missing_values(df, numeric_columns)\n",
        "    df, label_encoders = encode_categorical_variables(df, categorical_attributes)\n",
        "\n",
        "    # Standardize features and perform feature engineering\n",
        "    df, scaler = standardize_features(df, numeric_columns)\n",
        "    df = feature_engineering(df)\n",
        "\n",
        "    # Plot categorical attributes against performance target\n",
        "    if len(categorical_attributes) > 0:\n",
        "        plot_categorical_vs_performance(df, categorical_attributes, target)\n",
        "\n",
        "    # Split the data into training and testing sets\n",
        "    features = df.columns[df.columns != target].tolist()\n",
        "    X_train, X_test, y_train, y_test = split_data(df, features, target)\n",
        "\n",
        "    # Train and evaluate the model\n",
        "    model = train_model(X_train, y_train)\n",
        "    cv_score, mse, r2 = evaluate_model(model, X_train, y_train, X_test, y_test)\n",
        "    print(f\"Cross-Validation Score (MSE): {cv_score}\")\n",
        "    print(f\"Test Mean Squared Error: {mse}\")\n",
        "    print(f\"R2 Score: {r2}\")\n",
        "\n",
        "    # Determine feature importance\n",
        "    importances = feature_importance(model, features)\n",
        "    print('Feature Importances:')\n",
        "    for feature, importance in importances.items():\n",
        "        print(f'{feature}: {importance}')\n",
        "\n",
        "    # Generate recommendations and insights\n",
        "    print(\"\\nRecommendations for Future Digital Marketing Campaigns:\")\n",
        "    sorted_insights = sorted(importances.items(), key=lambda item: item[1], reverse=True)\n",
        "    for feature, importance in sorted_insights[:5]:\n",
        "        print(f\"- Focus on improving {feature}, as it has a high impact on campaign performance (importance score: {importance:.2f}).\")\n",
        "else:\n",
        "    print(\"Failed to load data.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZsoA86dRWX3i",
        "outputId": "99c7c42e-fe35-430b-d5af-2ef80562f6b0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.53.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "# Install required packages\n",
        "!pip install pandas seaborn matplotlib scikit-learn"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyMF1OMGWoNXizEAPGfGyQsj",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}